'use strict';var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _enzyme = require('enzyme');
var _FuelSavingsForm = require('./FuelSavingsForm');var _FuelSavingsForm2 = _interopRequireDefault(_FuelSavingsForm);
var _FuelSavingsTextInput = require('./FuelSavingsTextInput');var _FuelSavingsTextInput2 = _interopRequireDefault(_FuelSavingsTextInput);
var _FuelSavingsResults = require('./FuelSavingsResults');var _FuelSavingsResults2 = _interopRequireDefault(_FuelSavingsResults);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

/* Object builder. Could use test data builder pattern too.
                                                                                                                                                                                                                                  More info: http://blog.codeleak.pl/2014/06/test-data-builders-and-object-mother.html
                                                                                                                                                                                                                                  Returns fuel savings object. Overrides default values
                                                                                                                                                                                                                                  for any properties sent in on args object.
                                                                                                                                                                                                                                  Example: To get a fuel savings object like the
                                                                                                                                                                                                                                  default below, but with newMpg set to 10, call with
                                                                                                                                                                                                                                  getFuelSavings({ newMpg: 10});
                                                                                                                                                                                                                               */
function getFuelSavings(args) {
  var defaultFuelSavings = {
    newMpg: 20,
    tradeMpg: 10,
    newPpg: 1.50,
    tradePpg: 1.50,
    milesDriven: 100,
    milesDrivenTimeframe: 'week',
    displayResults: false,
    dateModified: null,
    necessaryDataIsProvidedToCalculateSavings: false,
    savings: {
      monthly: 0,
      annual: 0,
      threeYear: 0 } };



  return _extends({},
  defaultFuelSavings,
  args);

}

describe('<FuelSavingsForm />', function () {
  it('should contain <FuelSavingsTextInput /> components', function () {
    var fuelSavings = getFuelSavings();
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_FuelSavingsForm2.default, {
      onSaveClick: jest.fn(),
      onChange: jest.fn(),
      fuelSavings: fuelSavings }));

    var allInputs = wrapper.find(_FuelSavingsTextInput2.default);

    expect(allInputs.length).toEqual(5);
    expect(allInputs.at(0).props().name).toEqual('newMpg');
    expect(allInputs.at(0).props().value).toEqual(fuelSavings.newMpg);
    expect(allInputs.at(1).props().name).toEqual('tradeMpg');
    expect(allInputs.at(1).props().value).toEqual(fuelSavings.tradeMpg);
    expect(allInputs.at(2).props().name).toEqual('newPpg');
    expect(allInputs.at(2).props().value).toEqual(fuelSavings.newPpg);
    expect(allInputs.at(3).props().name).toEqual('tradePpg');
    expect(allInputs.at(3).props().value).toEqual(fuelSavings.tradePpg);
    expect(allInputs.at(4).props().name).toEqual('milesDriven');
    expect(allInputs.at(4).props().value).toEqual(fuelSavings.milesDriven);
  });

  it('should contain options to change miles driven timeframe', function () {
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_FuelSavingsForm2.default, {
      onSaveClick: jest.fn(),
      onChange: jest.fn(),
      fuelSavings: getFuelSavings() }));

    var expectedOption1 = '<option value="week">Week</option>';
    var expectedOption2 = '<option value="month">Month</option>';
    var expectedOption3 = '<option value="year">Year</option>';

    expect(wrapper.find('select').childAt(0).html()).toEqual(expectedOption1);
    expect(wrapper.find('select').childAt(1).html()).toEqual(expectedOption2);
    expect(wrapper.find('select').childAt(2).html()).toEqual(expectedOption3);
  });

  it('should contain <FuelSavingsResults /> when necessary conditions are met', function () {
    var fuelSavings = getFuelSavings({
      necessaryDataIsProvidedToCalculateSavings: true,
      savings: {
        monthly: 10,
        annual: 120,
        threeYear: 360 } });



    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_FuelSavingsForm2.default, {
      onSaveClick: jest.fn(),
      onChange: jest.fn(),
      fuelSavings: fuelSavings }));

    var expected = _react2.default.createElement(_FuelSavingsResults2.default, { savings: fuelSavings.savings });

    expect(wrapper.contains(expected)).toBeTruthy();
  });

  it('should not contain <FuelSavingsResults /> when necessary conditions are not met', function () {
    var fuelSavings = getFuelSavings();
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_FuelSavingsForm2.default, {
      onSaveClick: jest.fn(),
      onChange: jest.fn(),
      fuelSavings: fuelSavings }));

    var expected = _react2.default.createElement(_FuelSavingsResults2.default, { savings: fuelSavings.savings });

    expect(wrapper.contains(expected)).toBeFalsy();
  });

  it('should handle save button click', function () {
    var onSaveClick = jest.fn();
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_FuelSavingsForm2.default, {
      onSaveClick: onSaveClick,
      onChange: jest.fn(),
      fuelSavings: getFuelSavings() }));


    expect(onSaveClick).not.toBeCalled();
    wrapper.find('input[type="submit"]').simulate('click');
    expect(onSaveClick).toBeCalled();
  });

  it('should submit appState', function () {
    var fuelSavings = getFuelSavings();
    var onSaveClick = jest.fn();
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_FuelSavingsForm2.default, {
      onSaveClick: onSaveClick,
      onChange: jest.fn(),
      fuelSavings: fuelSavings }));


    expect(onSaveClick).not.toBeCalled();
    wrapper.find('input[type="submit"]').simulate('click');
    expect(onSaveClick).toBeCalled();
  });


  it('should call onChange when text input changes', function () {
    var onChange = jest.fn();

    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_FuelSavingsForm2.default, {
      onSaveClick: jest.fn(),
      onChange: onChange,
      fuelSavings: getFuelSavings() }));


    var changeEvent = { target: { name: 'newMpg', value: '20' } };

    expect(onChange).not.toBeCalled();
    wrapper.find(_FuelSavingsTextInput2.default).first().simulate('change', changeEvent);
    expect(onChange).toBeCalledWith(changeEvent);
  });

  it('should call onChange when timeframe changes', function () {
    var onChange = jest.fn();
    var fuelSavings = getFuelSavings();

    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_FuelSavingsForm2.default, {
      onSaveClick: jest.fn(),
      onChange: onChange,
      fuelSavings: fuelSavings }));


    var changeEvent = { target: { name: 'timeframe', value: 'year' } };

    expect(onChange).not.toBeCalled();
    wrapper.find('select').simulate('change', changeEvent);
    expect(onChange).toBeCalledWith(changeEvent);
  });
});