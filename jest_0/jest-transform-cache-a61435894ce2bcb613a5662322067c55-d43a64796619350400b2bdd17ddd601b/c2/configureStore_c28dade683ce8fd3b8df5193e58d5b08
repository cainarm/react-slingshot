'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.history = undefined;var _redux = require('redux');
var _reduxImmutableStateInvariant = require('redux-immutable-state-invariant');var _reduxImmutableStateInvariant2 = _interopRequireDefault(_reduxImmutableStateInvariant);
var _reduxThunk = require('redux-thunk');var _reduxThunk2 = _interopRequireDefault(_reduxThunk);
var _createBrowserHistory = require('history/createBrowserHistory');var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);

var _reactRouterRedux = require('react-router-redux');
var _reducers = require('../reducers');var _reducers2 = _interopRequireDefault(_reducers);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} // 'routerMiddleware': the new way of storing route changes with redux middleware since rrV4.
var history = exports.history = (0, _createBrowserHistory2.default)();
function configureStoreProd(initialState) {
  var reactRouterMiddleware = (0, _reactRouterRedux.routerMiddleware)(history);
  var middlewares = [
  // Add other middleware on this line...

  // thunk middleware can also accept an extra argument to be passed to each thunk action
  // https://github.com/gaearon/redux-thunk#injecting-a-custom-argument


















  // thunk middleware can also accept an extra argument to be passed to each thunk action
  // https://github.com/gaearon/redux-thunk#injecting-a-custom-argument
  _reduxThunk2.default, reactRouterMiddleware];return (0, _redux.createStore)(_reducers2.default, initialState, (0, _redux.compose)(_redux.applyMiddleware.apply(undefined, middlewares)));}function configureStoreDev(initialState) {var reactRouterMiddleware = (0, _reactRouterRedux.routerMiddleware)(history);var middlewares = [// Add other middleware on this line...
  // Redux middleware that spits an error on you when you try to mutate your state either inside a dispatch or between dispatches.
  (0, _reduxImmutableStateInvariant2.default)(), _reduxThunk2.default, reactRouterMiddleware];

  var composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || _redux.compose; // add support for Redux dev tools
  var store = (0, _redux.createStore)(_reducers2.default, initialState, composeEnhancers(
  _redux.applyMiddleware.apply(undefined, middlewares)));



  if (module.hot) {
    // Enable Webpack hot module replacement for reducers
    module.hot.accept('../reducers', function () {
      var nextReducer = require('../reducers').default; // eslint-disable-line global-require
      store.replaceReducer(nextReducer);
    });
  }

  return store;
}

var configureStore = process.env.NODE_ENV === 'production' ? configureStoreProd : configureStoreDev;exports.default =

configureStore;